//---------------=[ build_banner.c ]=---------->
#include <stdio.h> 
#include <string.h> 
#include <stdlib.h> 
#include <errno.h> 

/* READ ME -- PROGRAM PROBLEM SOLOVING: 
 * A common problem that I run into with my functions, 
 * is interfacing and working with data-types the function
 * works on and returns. For instance, in this function we 
 * build a buffer locally (inside the function) and gives 
 * us our desired buffer to be worked with through the rest
 * of the execution of the program or other functions. The 
 * issue we run into is the raw storage of the memory for 
 * the buffer. One way is to define a array in the main
 * program and pass the function a pointer. This works great 
 * if values such as buffer size is definte, in this case there
 * are too many variables regrading the buffers size. 
 * Creating the array/buffer inside the function itself is the 
 * defintley the easiest to write and type; however, the 
 * functions local variables are lost upon returning from the 
 * function. 
 * [SOLUTION WORK AROUND]: Making room on the heap. Decalre the buffer using Malloc 
 * and store the buffer on the heap. This would allow the main program to access this
 * region of memory with no problem and leave the clean up to the external functions.  
 *
 * Determines how far the banner will
 * go across the screen. BANNER_BREAK
 * refers from start of the banner to
 * where the TITLE/FILENAME will be
 * displayed. These may be adjusted 
 * to preference.  			   
 */

#define BANNER_WIDTH_MAX 50 	
#define BANNER_BREAK (BANNER_WIDTH_MAX/2)
#define DS_COMMENT "//"

char *banner_build(char *filename) {
	size_t max_buffer_sz = (strlen(filename) + BANNER_WIDTH_MAX); 
	char local_buffer[max_buffer_sz]; 
	char *ret_ptr; 
        int saved_index = 0; // For use after loop.	

	// Go Ahead and start with commenting out the banner. 
	strcpy(local_buffer, DS_COMMENT); 

	// Loop through and start building banner
	// form left to right. Subtracted 2 from BANNER_BREAK
	// to add room for the flare to encapsulate the filename. 
	for(int i=2; i < BANNER_BREAK; i++) { 
		local_buffer[i] = '-';;
	       // printf("BUILDING START BUFFER [%d] - %c\n", i, local_buffer[i]); 
		saved_index = i; 	
	}

	// ATTACH FLARE
	local_buffer[saved_index] = '=';   
	local_buffer[saved_index+1] = '[';  
	local_buffer[saved_index+2] = ' ';
	local_buffer[saved_index+3] = '\0';
	
	// APPEND FILE NAME (BAZz)
	strncat(local_buffer, filename, strlen(local_buffer)); 

	char *second_flare = " ]=";
	strncat(local_buffer, second_flare, strlen(local_buffer));

	char temp_buffer[BANNER_BREAK];
	for (int i = 0; i < BANNER_BREAK; i++) {
		temp_buffer[i] = '-';
		saved_index = i; 
	}
	temp_buffer[saved_index] = '\0';
	strncat(local_buffer, temp_buffer, strlen(local_buffer)); 
//	printf("%s\n", local_buffer); 

	char *end_cap = "-->\n";
	strncat(local_buffer, end_cap, strlen(local_buffer)); 
	// [DEBUG] printf("%s\n", local_buffer); 


	
// Problems returning a local var -- allocate mem on the heap	

// Allocate memory on the heap and save buffer on the heap and return pointer. 
	ret_ptr = (char *) malloc(strlen(local_buffer)); 
	if(ret_ptr == NULL) {
		perror("build_banner() allocting heap memory: "); 
		exit(-1);
	}
	// Copy over all the local data into heap memory. 
	strcpy(ret_ptr, local_buffer); 

	return ret_ptr;  
}


// TEST EXECUTION
int main() {
	char *buf; 
#define TESTFILE "biggieeeeeeeeeee.c"

	buf = banner_build(TESTFILE); 
	printf("%s\n", buf); 

}
	

